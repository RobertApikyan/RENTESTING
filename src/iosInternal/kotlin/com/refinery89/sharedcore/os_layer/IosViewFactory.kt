package com.refinery89.sharedcore.os_layer

import com.refinery89.sharedcore.os_layer.extensions.findViewByLabel
import kotlinx.cinterop.BetaInteropApi
import kotlinx.cinterop.ExperimentalForeignApi
import kotlinx.cinterop.useContents
import platform.Foundation.NSData
import platform.Foundation.NSURL
import platform.Foundation.NSUUID
import platform.Foundation.create
import platform.Foundation.dataWithContentsOfURL
import platform.UIKit.NSLayoutConstraint
import platform.UIKit.UIImage
import platform.UIKit.UIImageView
import platform.UIKit.UIScreen
import platform.UIKit.UIView
import platform.UIKit.accessibilityLabel

internal object IosViewFactory
{
	
	private const val closeImageB64 =
		""
	
	fun centerViewHorizontallyInParent(view: UIView)
	{
		val parent = view.superview
		if (parent != null)
		{
			view.setTranslatesAutoresizingMaskIntoConstraints(false)
			view.centerXAnchor.constraintEqualToAnchor(parent.centerXAnchor).setActive(true)
		}
	}
	
	fun getCloseButtonSizeInPt(): Int
	{
		return 16
	}
	
	@OptIn(ExperimentalForeignApi::class, BetaInteropApi::class)
	fun getCloseButton(r89Wrapper: UIView, anchorViewId: String, adLargestWidth: Int, imageUrl: String): UIImageView
	{
		val screenWidthPt = UIScreen.mainScreen.bounds.useContents {
			size.width
		}
		val buttonSize = getCloseButtonSizeInPt().toDouble()
		
		val placeButtonTop = adLargestWidth + buttonSize > screenWidthPt
		
		val closeButton = UIImageView()
		r89Wrapper.addSubview(closeButton)
		closeButton.accessibilityLabel = NSUUID().UUIDString()
		closeButton.setTranslatesAutoresizingMaskIntoConstraints(false)
		NSLayoutConstraint.activateConstraints(
			listOf(
				closeButton.widthAnchor.constraintEqualToConstant(buttonSize),
				closeButton.heightAnchor.constraintEqualToConstant(buttonSize),
			)
		)
		
		val data = if (imageUrl.isEmpty())
		{
			NSData.create(base64EncodedString = closeImageB64, options = 0UL)
		} else
		{
			//TODO(@Apikyan):Switch to asynchronous url loading API such as URLSession.
			NSData.dataWithContentsOfURL(NSURL(string = imageUrl))
		}
		
		if (data != null)
		{
			val image = UIImage(data = data)
			closeButton.setImage(image)
		}
		
		val anchorView = r89Wrapper.findViewByLabel(anchorViewId)
		
		if (anchorView != null)
		{
			if (placeButtonTop)
			{
				NSLayoutConstraint.activateConstraints(
					listOf(
						closeButton.bottomAnchor.constraintEqualToAnchor(anchorView.topAnchor),
						closeButton.trailingAnchor.constraintEqualToAnchor(anchorView.trailingAnchor),
					),
				)
			} else
			{
				NSLayoutConstraint.activateConstraints(
					listOf(
						closeButton.topAnchor.constraintEqualToAnchor(anchorView.topAnchor),
						closeButton.leadingAnchor.constraintEqualToAnchor(anchorView.trailingAnchor),
					),
				)
			}
		}
		
		return closeButton
	}
	
}

